    ##########################################################
    #################### 브랜드 추출 #########################
    ##########################################################
from sklearn.preprocessing import MinMaxScaler
import FinanceDataReader as fdr
from datetime import datetime, timedelta
from tqdm.notebook import tqdm
import pandas as pd
import numpy as np
import copy
import math


    
def fn_cloths_brand(x):
    
    brands = []
    no_brands = ['2019','19','19년','2019년형','19년형','2020년형','20년형','20년','2020','20','F/W','FW','SS',
                 '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
                 '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
                 '(ARS10%)','(ARS20%)']

    rmv=['19','20','FW','F/W'
         '일시불','무이자','[일시불]','[무이자]',
         '세일%','세일10%','세일20%','세일30%','세일40%','세일50%','세일60%',
         'ARS10%','ARS20%']

    
    for lst in x:
        for i in range(len(lst)):
            if lst[i] not in no_brands:
                a = lst[i].replace("[","")
                a = a.replace("]","")
                a = a.replace("(","")
                a = a.replace(")","")
                for j in rmv:
                    if a.find(j) == -1:
                        pass
                    elif a.find(j) != -1:
                        a = a.replace(j,"")
                    else: pass
                if '마르엘라로사티' in a:
                    a = '마르엘라로사티'
                brands.append(a)
                break
    return brands

def fn_inwear_brand(x):
    brands = []
    no_brands = ['2019','19','19년','2019년형','19년형','2020년형','20년형','20년','2020','20','F/W','FW','SS',
             '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
             '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
             '(ARS10%)','(ARS20%)']
    rmv=['19','20','FW','F/W','］FC바로셀로나','초특가',
         '일시불','무이자','[일시불]','[무이자]',
         '세일%','세일10%','세일20%','세일30%','세일40%','세일50%','세일60%','ARS10%','ARS20%']

    for lst in x:
        for i in range(len(lst)):
            if lst[i] not in no_brands:
                a = lst[i].replace("[","")
                a = a.replace("]","")
                a = a.replace("(","")
                a = a.replace(")","")
                for j in rmv:
                    if a.find(j) == -1:
                        pass
                    elif a.find(j) != -1:
                        a = a.replace(j,"")
                    else: pass
                if '오모떼' in a:
                    a = '오모떼'
                brands.append(a)
                break
    return brands
                
def fn_kitchen_brand(x):
    brands = []
    no_brands = ['2019','19','19년','2019년형','19년형','2020년형','20년형','20년','2020','20','F/W','FW','SS',
                 '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
                 '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
                 '(ARS10%)','(ARS20%)','(도냄)일시불','(도냄)무이자',
                 '국내생산','국내제조','뉴','신제품','전기식','회전통그릴','프랑스직수입','초특가','서장훈의','CRP-QS107FG/FS','CRP-P0610FD']
    rmv=['19','20','FW','F/W'
         '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
         '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
         '(ARS10%)','(ARS20%)','(도냄)일시불','의','전기밥솥']

    for lst in x:
        for i in range(len(lst)):
            if lst[i] not in no_brands:
                a = lst[i].replace("[","")
                a = a.replace("]","")
                for j in rmv:
                    if a.find(j) == -1:
                        pass
                    elif a.find(j) != -1:
                        a = a.replace(j,"")
                    else: pass
                if '(쿠)' in a:
                    a = '쿠첸'
                if '쿠쿠' in a:
                    a = '쿠쿠'
                if '휴롬' in a:
                    a = '휴롬'
                if '해피콜' in a:
                    a = '해피콜'
                if '쿠첸' in a:
                    a = '쿠첸'
                if a == '베스트':
                    a = '베스트하임'
                if 'PN풍년' in a:
                    a = 'PN풍년'
                if 'PN' in a:
                    a = 'PN풍년'
                if '쿠진' in a:
                    a = '쿠진'
                if '독일지니어스' in a:
                    a = '독일지니어스'
                if '센스락무선진공포장기' in a:
                    a = '센스락'
                if a in ['IH','1세트','2세트']:
                    a = None
                brands.append(a)
                break
    return brands

def fn_food_brand(x):
    brands = []
    no_brands = ['2019','19','19년','2019년','2020년','2019년형','19년형','2020년형','20년형','20년','2020','20','F/W','FW','SS',
                 '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
                 '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
                 '(ARS10%)','(ARS20%)','국내산','멋진밥상','명인','특등급','특대사이즈'
                ]

    rmv=['19','20','FW','F/W',
         '무','일','무)','일)','(일시불)','[일시불]','(무이자)','[무이자]','일시불','무이자',
         '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
         '(ARS10%)','(ARS20%)','a4','의','가격인하','기간','*'
        ]

    for lst in x:
        for i in range(len(lst)):
            if lst[i] not in no_brands:
                a = lst[i].replace("[","")
                a = a.replace("]","")
                a = a.replace(")","")
                a = a.replace("(","")
                for j in rmv:
                    if a.find(j) == -1:
                        pass
                    elif a.find(j) != -1:
                        a = a.replace(j,"")
                    else: pass
                if '농협' in a:
                    a = '농협'
                if '수협' in a:
                    a = '수협'
                if '하림' in a:
                    a = '하림'
                if '참바다' in a:
                    a = '참바다'
                if '신세대' in a:
                    a = '신세대푸드'
                if '우리나라' in a:
                    a = '우리나라맛밤'
                if '제주바다' in a:
                    a = '제주바다'
                if '한라궁' in a:
                    a = '한라궁황칠'
                if '전철우' in a:
                    a = '전철우'
                if '해초미인' in a:
                    a = '해청정'
                if '맛명가' in a:
                    a = '맛의명가'
                if '이숙' in a:
                    a = '이숙'
                if '서산뜸' in a:
                    a = '서산뜨레'
                if '갓바위' in a:
                    a = '갓바위식품'
                if '해뜰찬' in a:
                    a = '해뜰찬'
                if a in ['손질오징어','손질통오징어','손질갑오징어','안동간고등어','영산포숙성',
                         '궁중','AAE','AAB','AAC','옛날','구워만든','자연산','강원도양구','캘리포니아','특大손질갑오징어','속초명물',
                        '영광','창녕','고칼슘검은콩두유48팩+호두아몬드','국내산참조기12팩','거창특등급사과','더커진거창특등급사과','손질',
                         '맛있는','사용불가미리구운','황토방','완도꼬마활전복','특등급','신안생물','제주갈치+참조기세트',
                         'AAC한우소머리곰탕양곰탕세트','제주갈치고등어구이세트','포항구룡포과메기세트','영산포숙성홍어회7팩','통뼈',
                         '자숙찰골뱅이','고창','자이언트킹랍스터','완도산','반건조우럭','완도특大활전복','영광법성포굴비35마리',
                         '영광법성포굴비마리','영산포숙성홍어회6팩','추억쥐치포110장','추억쥐치포55장','완도한입활전복','여수순살갈치11팩',
                         '여수돌산갓김치7kg','한입직화장어구이10팩','진도기삼활전복25마리','강원도산골더덕침10팩','양평','AAC녹두삼계탕8팩','AAC녹두삼계탕죽세트']:
                    a = None
                brands.append(a)
                break
    return brands

def fn_skins_brand(x):
    brands = []
    no_brands = ['2019','19','19년','2019년형','19년형','2020년형','20년형','20년','2020','20','F/W','FW','SS',
                 '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
                 '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
                 '(ARS10%)','(ARS20%)','(도냄)일시불','(도냄)무이자',
                 '국내생산','국내제조','뉴','신제품','전기식','회전통그릴','프랑스직수입','초특가','서장훈의',
                '시크릿','프리미엄','NEW프리미엄','NEW']

    rmv=['19','20','FW','F/W',
         '(일시불)','[일시불]','(무이자)','[무이자]','일시불','무이자',
         '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
         '(ARS10%)','(ARS20%)','(도냄)일시불','의']

    for lst in x:
        for i in range(len(lst)):
            if lst[i] not in no_brands:
                a = lst[i].replace("[","")
                a = a.replace("]","")
                for j in rmv:
                    if a.find(j) == -1:
                        pass
                    elif a.find(j) != -1:
                        a = a.replace(j,"")
                    else: pass
                if 'TS샴푸' in a:
                    a = 'TS'
                if '고데롤' in a:
                    a = '유토렉스'
                brands.append(a)
                break
    return brands

def fn_digital_brand(x):
    brands = []
    no_brands = ['2019','19','19년','2019년형','19년형','2020년형','20년형','20년','2020','20','F/W','FW','SS',
                 '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
                 '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
                 '(ARS10%)','(ARS20%)','(삼성카드','6월','5%)무이자','국내제조','초특가','파격가','신모델','1등급']

    rmv=['19','20','FW','F/W',
         '(일시불)','[일시불]','(무이자)','[무이자]','일시불','무이자',
         '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
         '(ARS10%)','(ARS20%)']

    for lst in x:
        for i in range(len(lst)):
            if lst[i] not in no_brands:
                a = lst[i].replace("[","")
                a = a.replace("]","")
                for j in rmv:
                    if a.find(j) == -1:
                        pass
                    elif a.find(j) != -1:
                        a = a.replace(j,"")
                    else: pass
                if 'LG' in a:
                    a = 'LG'
                if '삼성' in a:
                    a = '삼성'
                if '딤채' in a:
                    a = '딤채'
                if a == '캐리어':
                    a = '렌탈캐리어'
                if '무풍' in a:
                    a = '삼성'
                if '위니아' in a:
                    a='위니아'
                brands.append(a)
                break
    return brands

def fn_daily_brand(x):
    brands = []
    no_brands = ['2019','19','19년','2019년','2020년','2019년형','19년형','2020년형','20년형','20년','2020','20','F/W','FW','SS',
                 '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
                 '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
                 '(ARS10%)','(ARS20%)',
                '1+1','1세트','2세트','5세트','[1세트]','[2세트]','초특가','한세트','[12.5m','x','국내제조',
                'ALL','new','NEW','New','파격가','붙이는','완벽더블구성','올뉴',
                '배관청소용품','기본구성','KF94','국내제작','1+1세트','파격찬스','파격할인','프리미엄']

    rmv=['19','20','FW','F/W',
         '무)','일)','(일시불)','[일시불]','(무이자)','[무이자]','일시불','무이자',
         '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
         '(ARS10%)','(ARS20%)',
        '[12.5m x 3롤]','[12.5m x 1롤]','[12.5m x 2롤]','[실속패키지]','[풀패키지]',
         '(싱글사이즈)','(더블+싱글)','(더블+더블)','(중형)','(더블사이즈)','(점보특대형)','(퀸+퀸)','(특대)','(킹+싱글)','(대형)','(퀸+싱글)',
         '(킹사이즈)','(퀸사이즈)','(점보형)','가)','(싱글+싱글)','(점보)','풀패키지','실속패키지','써큘레이터','1300','에어쿨러엣지'
        ]

    for lst in x:
        for i in range(len(lst)):
            if lst[i] not in no_brands:
                a = lst[i].replace("[","")
                a = a.replace("]","")
                for j in rmv:
                    if a.find(j) == -1:
                        pass
                    elif a.find(j) != -1:
                        a = a.replace(j,"")
                    else: pass
                if '월시스' in a:
                    a = '월시스'
                if 'LG' in a:
                    a = 'LG'
                if '보국' in a:
                    a = '보국'
                if '센스톰' in a:
                    a = '센스톰'
                if '스팀큐' in a:
                    a = '스팀큐'
                if '까사마루' in a:
                    a = '까사마루'
                if '엔웰스' in a:
                    a = '엔웰스'
                if '브람스' in a:
                    a = '브람스'
                if '김병지' in a:
                    a = '거미손'
                if a in ['김병만의','3D에어매쉬']:
                    a = None
                brands.append(a)
                break
    return brands

def fn_health_brand(x):
    brands = []
    no_brands = ['2019','19','19년','2019년형','19년형','2020년형','20년형','20년','2020','20','F/W','FW','SS',
                 '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]','S/S',
                 '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
                 '(ARS10%)','(ARS20%)','(일)','일)','무)','(무)','뉴','(일)3인용','(일)4인용','(무)3인용','(무)4인용',
                 '여성','남성','(직매입)','특집','단하루']

    rmv=['19','20','FW','F/W',
         '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
         '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
         '(ARS10%)','(ARS20%)','(일)','(무)','일)','무)','SET','18k']

    for lst in x:
        for i in range(len(lst)):
            if lst[i] not in no_brands:
                a = lst[i].replace("[","")
                a = a.replace("]","")
                for j in rmv:
                    if a.find(j) == -1:
                        pass
                    elif a.find(j) != -1:
                        a = a.replace(j,"")
                    else: pass
                if '한삼인' in a:
                    a = '한삼인'
                if '무농약레드비트즙' in a:
                    a = '머시주스'
                if '모나코사놀' in a:
                    a = '뉴트리원'
                if '안국' in a:
                    a = '안국건강'
                if a in ['베지밀','통째로','여자를','네페르티티','밀싹',
                         '뉴질랜드','"','100%리얼착즙석류','서울대','리얼니파팜',
                         '이경제의','정직한','콜라겐3.2','한국인','프리바이오틱스']:
                    a = None
                brands.append(a)
                break
    return brands

def fn_merchandise_brand(x):
    brands = []
    no_brands = ['2019','19','19년','2019년형','19년형','2020년형','20년형','20년','2020','20','F/W','FW','SS',
                 '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]','S/S',
                 '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
                 '(ARS10%)','(ARS20%)','(일)','일)','무)','(무)','뉴','(일)3인용','(일)4인용','(무)3인용','(무)4인용',
                 '여성','남성']

    rmv=['19','20','FW','F/W',
         '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
         '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
         '(ARS10%)','(ARS20%)','(일)','(무)','일)','무)','SET','18k']

    for lst in x:
        for i in range(len(lst)):
            if lst[i] not in no_brands:
                a = lst[i].replace("[","")
                a = a.replace("]","")
                for j in rmv:
                    if a.find(j) == -1:
                        pass
                    elif a.find(j) != -1:
                        a = a.replace(j,"")
                    else: pass
                if '생줄랑' in a:
                    a = '생쥴랑'
                if '월드컵' in a:
                    a = '엘유티'
                if 'AAA' in a:
                    a = '트리플에이'
                brands.append(a)
                break
    return brands

def fn_nonp_brand(x):
    brands = []
    no_brands = ['2019','19','19년','2019년','2020년','2019년형','19년형','2020년형','20년형','20년','2020','20','F/W','FW','SS',
                 '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
                 '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
                 '(ARS10%)','(ARS20%)','TCOM_관절염','치료','의료기기','NEW','(렌탈)'
                ]

    rmv=['19','20','FW','F/W',
         '무','일','무)','일)','(일시불)','[일시불]','(무이자)','[무이자]','일시불','무이자',
         '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
         '(ARS10%)','(ARS20%)','TCOM_','상담접수상품'
        ]

    for lst in x:
        for i in range(len(lst)):
            if lst[i] not in no_brands:
                a = lst[i].replace("[","")
                a = a.replace("]","")
                a = a.replace(")","")
                a = a.replace("(","")
                for j in rmv:
                    if a.find(j) == -1:
                        pass
                    elif a.find(j) != -1:
                        a = a.replace(j,"")
                    else: pass
                if '처브' in a:
                    a = '처브'
                if 'DB' in a:
                    a = 'DB손해보험'
                if 'SK매직' in a:
                    a = 'SK매직'
                if '실속하나로' in a:
                    a = '동양생명'
                if 'KT' in a:
                    a = 'KT'
                if '프리드' in a:
                    a = '프리드'
                if '슬리미' in a:
                    a = '슬리미'
                if 'AXA' in a:
                    a = 'AXA손해보험'
                if '수도' in a:
                    a='수도119'
                if 'AIG' in a:
                    a='AIG손해보험'
                if 'X-RUN' in a:
                    a = None

                brands.append(a)
                break
    return brands

def fn_furniture_brand(x):
    brands = []
    no_brands = ['2019','19','19년','2019년형','19년형','2020년형','20년형','20년','2020','20','F/W','FW','SS',
                 '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
                 '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
                 '(ARS10%)','(ARS20%)','(일)','일)','무)','(무)','뉴','(일)3인용','(일)4인용','(무)3인용','(무)4인용','4인용','6인용','3인용','(퀸)','(싱글)']

    rmv=['19','20','FW','F/W'
         '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
         '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
         '(ARS10%)','(ARS20%)','(일)','(무)','일)','무)','SET']

    for lst in x:
        for i in range(len(lst)):
            if lst[i] not in no_brands:
                a = lst[i].replace("[","")
                a = a.replace("]","")
                for j in rmv:
                    if a.find(j) == -1:
                        pass
                    elif a.find(j) != -1:
                        a = a.replace(j,"")
                    else: pass
                if '장수' in a:
                    a = '장수'
                if '우아미' in a:
                    a='우아미'
                brands.append(a)
                break
    return brands

def fn_bedding_brand(x):
    brands = []
    no_brands = ['2019','19','19년','2019년형','19년형','2020년형','20년형','20년','2020','20','F/W','FW','SS',
                 '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
                 '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
                 '(ARS10%)','(ARS20%)','(일)','일)','무)','(무)','뉴']

    rmv=['19','20','FW','F/W'
         '일시불','무이자','(일시불)','[일시불]','(무이자)','[무이자]',
         '(세일%)','(세일10%)','(세일20%)','(세일30%)','(세일40%)','(세일50%)','(세일60%)',
         '(ARS10%)','(ARS20%)','(일)','(무)','일)','무)','3인용','4인용','SET']

    for lst in x:
        for i in range(len(lst)):
            if lst[i] not in no_brands:
                a = lst[i].replace("[","")
                a = a.replace("]","")
                for j in rmv:
                    if a.find(j) == -1:
                        pass
                    elif a.find(j) != -1:
                        a = a.replace(j,"")
                    else: pass
                if '리앤' in a:
                    a = '리앤코리아'
                if a == '안지':
                    a = None
                brands.append(a)
                break
    return brands

    ##########################################################
    #################### 상품종류 추출 #######################
    ##########################################################
    
def fn_prd_cloths(x):
    prd_name = []
    for i in range(len(x)):
        prd_name.append([])

    things = ['니트','롱코트','벤치코트','무스탕','터틀넥','패딩','팬츠','본딩팬츠','롱패딩',
            '기모팬츠','코트','트레이닝','데님팬츠','트렌치재킷','점퍼','티셔츠','롤업재킷',
              '정장팬츠','셔츠','밍크코트','원피스','블라우스','수트','정장','카라티셔츠',
              '하프코트','리버시블재킷','기모밴딩팬츠','기모','리버시블','베스트','밍크',
             '가디건','윈터','여럼','겨울','썸머','집업재킷','트렌치','재킷','앙상블','반팔',
              '플리츠','윈드브레이커','맨투맨','기모티','스웨터','구스','자켓','워터 액티비티',
              '라운지웨어','이지웨어','모크넥','덕다운','반바지']
    things.sort(key=len,reverse=True)

    for i in range(len(x)):
        a = x.iloc[i,1].replace("[","")
        a = a.replace("]","")
        a = a.replace("(","")
        a = a.replace(")","")
        for j in things:
            if j in a:
                prd_name[i].append(j)
            else:
                pass
        prd_name[i].sort(key=len)
    return prd_name

def fn_prd_inwear(x):    
    prd_name = []
    for i in range(len(x)):
        prd_name.append([])

    things = ['브라','브라팬티','브라세트','지퍼브라','팬티','드로즈','런닝',
              '치마레깅스','롱드로즈','트렁크','레깅스',
              '이지탑','홈웨어','동내의','브라탑','슬리머','언더셔츠',
              '란쥬','라이크라','레이스','이지웨어','원피스','언더탑','이너웨어','웜웨어',
             '베이스레이어','쉐이퍼']

    things.sort(key=len,reverse=True)

    for i in range(len(x)):
        a = x.iloc[i,1].replace("[","")
        a = a.replace("]","")
        a = a.replace("(","")
        a = a.replace(")","")
        for j in things:
            if j in a:
                prd_name[i].append(j)
            else:
                pass
        prd_name[i].sort(key=len)
    return prd_name

def fn_prd_kitchen(x):
    prd_name = []
    for i in range(len(x)):
        prd_name.append([])
    things = ['냄비','압력밥솥','가스레인지','에어프라이어','분쇄믹서기','믹서기','커피머신',
              '미니오븐','오븐','진공포장기','직화그릴','가스와이드그릴레인지','전기밥솥',
              '프라이팬',
              '티메이커','키친툴','밀폐용기','싱크','싱크선반','살균건조기','스텐밀폐용기',
              '도마','인덕션','양면그릴','후라이팬','그릴','착즙기','텀블러','스퀴저',
              '식기건조대',
              '진공쿠킹블렌더','전자레인지','지퍼백','IH 냄비','IH양면팬','수세미','다지기',
              '티포트','가마솥',
              '멀티포트','죽제조기','블렌더','냄비후라이팬','칼도마','보온병','자동회전냄비',
              '행주',
              '스텐용기','프라이팬세트','후라이팬세트','디너세트','멀티쿡','맷돌','홈세트',
              '실버팬','참소쿠리',
             '중탕기','전기렌인지','식기세척기','후레쉬 세트','매직큐브채칼']
    things.sort(key=len,reverse=True)

    for i in range(len(x)):
        a = x.iloc[i,1].replace("[","")
        a = a.replace("]","")
        a = a.replace("(","")
        a = a.replace(")","")

        for j in things:
            if j in a:
                prd_name[i].append(j)

        if '멀티포트' in prd_name[i]:
            del prd_name[i][prd_name[i].index('티포트')]
        else:pass
        if '전기렌인지' in prd_name[i]:
            prd_name[i][prd_name[i].index('전기렌인지')]= prd_name[i][prd_name[i].index('전기렌인지')].replace("전기렌인지",'전기레인지')
        else:pass
        prd_name[i].sort(key=len)
    return prd_name

def fn_prd_food(x):
    prd_name = []
    for i in range(len(x)):
        prd_name.append([])

    things = ['갈비탕','손질갑오징어','햅쌀','손질왕꼬막','황태','간고등어','호빵','손질꽃게',
              '대구','매운탕','다시팩','활전복','홍어','순대','곱창','순대 곱창 전골','벌꿀',
              '손질새우','동태포','안창살','갈비살구이','옥수수','소갈비살구이','옥돔','갈치',
              'LA갈비',
              '손질문어','쥐포','곡물','매생이','쌀','오렌지','재첩국','쇠고기 장조림','홍어',
              '모시떡','부각','식혜','찰보리식혜','갓김치','총각김치','곤드레나물밥','가자미',
              '간장전복장','아구','양태','광어','갈치','고등어','바당장어','꼬리곰탕','선식',
              '병어','포기김치','감말랭이','누룽지삼계탕','열무김치','매실원액','닭발세트',
              '고춧가루',
              '치마살','동부기피','검정깨','전두부세트','손질낙지','소한마리찜','아카시아꿀',
              '야생화꿀',
              '통오징어','오이소박이','젓갈세트','꽃게','생새우','샤인머스켓','간편시래기',
              '산돌배즙','맛밤','밤양갱','홍어회',
              '곰탕세트','치킨스테이크','스테이크','과메기','식탁앤김','랍스터','머루원액',
              '낙곱새','고구마','참굴','감자탕',
              '자숙찰골뱅이','한우소머리양곰탕','새꼬막','곰탕','피꼬막','사과','참조기',
              '돼지왕구이','돼지왕구이','메주','한라봉',
              '천혜향','리얼국밥','바다장어','해물철판','삼계탕','녹용도가니탕','한우',
              '콩국수','배추김치','강정바','두유','오리로스',
              '수산물','갑오징어','우삽겹','굴비','소한마리세트','돔','오메기떡',
              '냉면','다시마국수','골드키위','김치','반건조우럭','만두','커피','갓김치',
             '반건조 오징어','메로','뒷고기','돈볼로스','마시는한끼','쥐치포','손질오징어',
              '육포','오리 슬라이스','감귤','바베큐','직화장어구이','장어','도시락김','전장김','김','더덕무침','해장국','양평 해장국']
    things.sort(key=len,reverse=True)

    for i in range(len(x)):
        a = x.iloc[i,1].replace("[","")
        a = a.replace("]","")
        a = a.replace("(","")
        a = a.replace(")","")
        for j in things:
            if j in a:
                prd_name[i].append(j)
            else:
                pass
        if '우삽겹' in prd_name[i]:
            prd_name[i][prd_name[i].index('우삽겹')] = prd_name[i][prd_name[i].index('우삽겹')].replace('우삽겹','우삼겹')
        prd_name[i].sort(key=len)
    return prd_name

def fn_prd_skins(x):
    prd_name = []
    for i in range(len(x)):
        prd_name.append([])

    things = ['기초세트','달팽이크림','코코넛크림','트리트먼트','립스틱','뿌리펌',
              '인텐시브 세럼','세럼','선스틱','헤어컬러크림세트','쿠션','볼륨 스프레이',
              '고데기','샴푸',
              '트리트먼트','선쿠션','셀프뿌리퍼머','젤네일','탈모 부스터','커버쿠션','쿠션',
              '아이브로우',
              '마스크','에센스','커버팩트','오일 워시','아이라이너','속눈썹','마스크팩',
              '헤어볼륨쿠션','클렌져',
              '크림세트','클린샤워','톤커버크림','고데롤','썬스틱','아이스타일러','클렌징패드',
              '링클 리프트','브러쉬','풋케어','볼륨스타일러','새치컬러염색제','염색제','틴트브로우','모공기기관리','헤어컬러','필링']
    things.sort(key=len,reverse=True)

    for i in range(len(x)):
        a = x.iloc[i,1].replace("[","")
        a = a.replace("]","")
        a = a.replace("(","")
        a = a.replace(")","")
        for j in things:
            if j in a:
                prd_name[i].append(j)
            else:
                pass
        prd_name[i].sort(key=len)
    return prd_name

def fn_prd_digital(x):
    prd_name = []
    for i in range(len(x)):
        prd_name.append([])

    things = ['세탁기','냉장고','TV','노트북','공기청정기','건조기','미니건조기','무선청소기',
              '에어컨','스타일러','로보킹','김치냉장고','로봇청소기','공청기','청소기','무풍']
    things.sort(key=len,reverse=True)

    for i in range(len(x)):
        a = x.iloc[i,1].replace("[","")
        a = a.replace("]","")
        a = a.replace("(","")
        a = a.replace(")","")
        for j in things:
            if j in a:
                if j=='무풍':
                    j = '무풍선풍기'
                prd_name[i].append(j)
            else:
                pass
        prd_name[i].sort(key=len)
    return prd_name

def fn_prd_daily(x):
    prd_name = []
    for i in range(len(x)):
        prd_name.append([])

    things = ['옷걸이','옷걸이 세트','비데','리빙박스','전동공구','공구세트','전동공구세트',
              '견인기기','방역용마스크','KF94','방역마스크','행거','릴렉스 체어','무선청소기',
              '바른자세밴드','금고','공구 세트','마스크','한장빨래','클리너','선풍기',
              '스쿼트머신',
              '스피드랙','낚시세트','코일카매트','카매트','건조기 시트','마사지기','서큘레이터',
              '차량용 공기청정기','빨래 삶통','삶통','싱크대 거름통','선글라스','뚜러킹',
              '매트릭스',
              '예초기','면도날','면도기','물매트','교자상','안마의자', '블루투스이어폰','청소기',
              '블랙박스','로봇청소기','통증패치','반신욕기','도어락','다리미','카페트매트',
              '마리캉',
              '전등','LED 전등','온열매트','오디오','단열벽지','디퓨저','동전패치','매트',
              '실크벽지',
              '매트리스','광선조사기','워킹머신','샤워기','실크단열벽지','안마 매트',
              '접이식 테이블',
              '접이식 의자','접이식 벤치 의자','테이블','플래티늄','헤어드라이어기','치약세트',
              '치약',
             '바리캉','안전스틱','수액패치','메모리폼','미니히터','혈압계','히터','섬유유연제',
              '액체세제','윈큘레이터','폴딩선반','써큘레이터','창문형 에어컨','에어컨','이동식에어컨','손안마기','베개','자석패치','편백나무베개','폴딩 의자','매직건조대','건조대','쿨잠패드','에어쿨러','라텍스','배개'
             ]
    things.sort(key=len,reverse=True)

    for i in range(len(x)):
        a = x.iloc[i,1].replace("[","")
        a = a.replace("]","")
        a = a.replace("(","")
        a = a.replace(")","")
        for j in things:
            if j in a:
                if j == '배개':
                    j='베개'
                prd_name[i].append(j)
            else:
                pass
        prd_name[i].sort(key=len)
    return prd_name

def fn_prd_health(x):
    prd_name = []
    for i in range(len(x)):
        prd_name.append([])

    things = ['루테인','양배추진액','전립쎈 프라임','전립쎈','두유','검은콩 두유','베지밀',
              '순홍삼','순홍삼진',
    '석류즙','생식','팥물','티톡','생유산균골드','생유산균','밀싹','레모나','초록입홍합',
              '다이어트','석류','프리바이오틱스',
    '오메가','비타민','철갑상어','황제진액','분말','모나코사놀','무농약레드비트즙','비트즙',
              '해죽순','비에날씬','신바이오틱스',
    '착즙','콜라겐']
    things.sort(key=len,reverse=True)

    for i in range(len(x)):
        a = x.iloc[i,1].replace("[","")
        a = a.replace("]","")
        a = a.replace("(","")
        a = a.replace(")","")
        for j in things:
            if j in a:
                prd_name[i].append(j)
            else:
                pass
        prd_name[i].sort(key=len)
    return prd_name

def fn_prd_merchandise(x):
    prd_name = []
    for i in range(len(x)):
        prd_name.append([])

    things = ['미들퍼부츠','부츠','노벨라백','백','시계','제니스시계','워치','캐리어','핸드백',
              '소가죽 핸드백','모자세트','모자',
    '밍크니팅모자','밍크머플러','머플러','머플러세트','토트백','토트백세트','워킹화','슬립온',
              '스트랩슬립온','백팩',
    '트레킹화','트레킹화세트','캐쥬얼슈즈','선글라스','스니커즈','코트 스니커즈', 
              '아일렛 스니커즈','어글리스니커즈','가죽 스니커즈',
    '다이얼 트레킹화','다이얼트레킹화','다이얼워킹화','다이얼 워킹화','숄더백','바디 숄더백',
              '테일 숄더백','여행가방','크로스바디백',
    '러닝화','선글라스','버킷백','투웨이백','샌들','샌들세트','르스틀릿','파일백','사첼',
              '사첼백','슬리퍼','더플백','호보백',
    '크로스백','핸드백','컬렉션','양산','목걸이','팔찌','러브 팔찌','트리플 목걸이',
              '트리플 링','링','트리플 팔찌',
    '신디스틱 팔찌','에어러닝화','글로리아 목걸이','주얼리세트','주얼리','반지','모터백',
              '미란다백','보스턴','쇼퍼백','스퀘어백',
    '크로스 백','스카프','메디오백','드로잉 백','플라이트백','패브릭 백','로퍼','데이쿠션로퍼',
              '목걸이팔찌','팔찌반지','마술벨트',
    '마스터','골든 마스터','웨이스트백','쇼퍼백','라이트숄더백','케이프','장지갑','머플러',
              '머플러 숄','에디션','버켓 백','펌프스',
    '귀걸이','골드바','어반','테일숄더백','방한화','컬러풀에디션','장갑','퍼부츠',
              '퍼부츠 세트','캐리올','패딩슈즈','리스틀릿',
             '스퀘어 크로스','탑핸들 체인 숄더','체인 숄더']
    things.sort(key=len,reverse=True)

    for i in range(len(x)):
        a = x.iloc[i,1].replace("[","")
        a = a.replace("]","")
        a = a.replace("(","")
        a = a.replace(")","")
        for j in things:
            if j in a:
                prd_name[i].append(j)
            else:
                pass
        prd_name[i].sort(key=len)
    return prd_name

def fn_prd_nonp(x):
    prd_name = []
    for i in range(len(x)):
        prd_name.append([])

    things = ['보험','나트랑','빈펄랜드','간편보험','괌','괌PIC','오키나와','중국','오사카','렌탈서비스','렌터카','북해도','장사장가계',
    '장가계','다낭','호주/뉴질랜드','렌탈','처리기','대만','하와이','태항산','라이프','하이난','동경','오다이바','하코네',
    '미동부','캐나다','청도','호주','오클랜드','북경','암플랜','의료기기','정수기','상담예약','Serise','암보험','플랜',
    '더행복한플랜','건강보험','모션배드','안마의자','휴대폰','반신욕기','세부','네팔','대련','페루','하문','바디프랜드',
    '주택화재보험','상조서비스','주택상해','매트리스','숙박권','런닝머신','펫케어']
    things.sort(key=len,reverse=True)

    for i in range(len(x)):
        a = x.iloc[i,1].replace("[","")
        a = a.replace("]","")
        a = a.replace("(","")
        a = a.replace(")","")
        for j in things:
            if j in a:
                prd_name[i].append(j)
            else:
                pass
        prd_name[i].sort(key=len)
    return prd_name

def fn_prd_furniture(x):
    prd_name = []
    for i in range(len(x)):
        prd_name.append([])

    things = ['침대', '붙박이장','리클라이너','하이바스','서랍형 침대', '가죽 침대', '흙침대','소파',
    '천연소가죽 소파', '리클라이너 소파','시공','시공패키지','수납형 침대','LED 침대','서랍장',
    '베드룸','거실장','베드룸 세트','흙카우치소파','서랍 침대','침실가구','침실 가구 풀세트',
    '침실가구 실속세트', '협탁','화장대','화장대 세트','흙카우치','리프트업테이블','오토만스툴']
    things.sort(key=len,reverse=True)

    for i in range(len(x)):
        a = x.iloc[i,1].replace("[","")
        a = a.replace("]","")
        a = a.replace("(","")
        a = a.replace(")","")
        for j in things:
            if j in a:
                prd_name[i].append(j)
            else:
                pass
        prd_name[i].sort(key=len)
    return prd_name

def fn_prd_bedding(x):
    prd_name = []
    for i in range(len(x)):
        prd_name.append([])

    things = ['침구세트' , '침구', '암막커튼', '커튼','암막커튼 세트','카페트','카페트 세트', '대자리']
    things.sort(key=len,reverse=True)

    for i in range(len(x)):
        a = x.iloc[i,1].replace("[","")
        a = a.replace("]","")
        a = a.replace("(","")
        a = a.replace(")","")
        for j in things:
            if j in a:
                prd_name[i].append(j)
            else:
                pass
        prd_name[i].sort(key=len)    
    return prd_name



    ##########################################################
   ################## 과거2회 가중치 추출 ######################
    ##########################################################
def fn_two_amt(x):
    anw=[]
    for i in tqdm(range(len(x))):
        # 무형이면 예측 안하니까 0
        if x['상품군'][i]=='무형':
            anw.append(0)

        else:
            # 상품코드와 누적노출(분)이 같은 이전 2행의 평균으로 채움
            df = x[(x['상품코드']==x['상품코드'][i])
                      &(x['누적노출(분)']==x['누적노출(분)'][i])][['상품코드','방송일시','마더코드','판매단가','수량','누적노출(분)']]
            if len(df[df['방송일시']<x['방송일시'][i]]['수량']) > 1:
                anw.append(((df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-2]*0.2)+(df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-1]*0.8)))

            else:
                # 상품코드가 같은게 없을때, 마더코드와 누적노출(분)이 같은 이전 2행의 평균으로 채움
                df = x[(x['마더코드']==x['마더코드'][i])&(x['상품코드']!=x['상품코드'][i])
                          &(x['누적노출(분)']==x['누적노출(분)'][i])][['상품코드','방송일시','마더코드','수량','누적노출(분)']]
                if len(df[df['방송일시']<x['방송일시'][i]]) > 1:
                    anw.append(((df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-2]*0.2)+(df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-1]*0.8)))

                else:
                    # 상품코드와 마더코드가 없을 때, 같은 브랜드로 채워줌
                    df = x[(x['마더코드']!=x['마더코드'][i])&(x['상품코드']!=x['상품코드'][i])
                          &(x['누적노출(분)']==x['누적노출(분)'][i])&(x['브랜드']==x['브랜드'][i])
                             &(x['상품군']==x['상품군'][i])][['상품코드','방송일시','마더코드','수량','누적노출(분)']]
                    if len(df[df['방송일시']<x['방송일시'][i]]) > 1:
                        anw.append(((df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-2]*0.2)+(df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-1]*0.8)))

                    else:
                        anw.append(0)
    return anw
                        
def fn_three_amt(x):
    anw = []
    for i in tqdm(range(len(x))):
        # 무형이면 예측 안하니까 0
        if x['상품군'][i]=='무형':
            anw.append(0)

        else:
            # 상품코드와 누적노출(분)이 같은 이전 3행의 평균으로 채움
            df = x[(x['상품코드']==x['상품코드'][i])
                      &(x['누적노출(분)']==x['누적노출(분)'][i])][['상품코드','방송일시','마더코드','판매단가','수량','누적노출(분)']]
            if len(df[df['방송일시']<x['방송일시'][i]]['수량']) > 2:
                anw.append((df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-3]*0.1+df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-2]*0.1+df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-1]*0.8))

            else:
                # 상품코드가 같은게 없을때, 마더코드와 누적노출(분)이 같은 이전 2행의 평균으로 채움
                df = x[(x['마더코드']==x['마더코드'][i])&(x['상품코드']!=x['상품코드'][i])
                          &(x['누적노출(분)']==x['누적노출(분)'][i])][['상품코드','방송일시','마더코드','수량','누적노출(분)']]
                if len(df[df['방송일시']<x['방송일시'][i]]) > 2:
                    anw.append((df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-3]*0.1+df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-2]*0.1+df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-1]*0.8))

                else:
                    # 상품코드와 마더코드가 없을 때, 같은 브랜드로 채워줌
                    df = x[(x['마더코드']!=x['마더코드'][i])&(x['상품코드']!=x['상품코드'][i])
                          &(x['누적노출(분)']==x['누적노출(분)'][i])&(x['브랜드']==x['브랜드'][i])
                             &(x['상품군']==x['상품군'][i])][['상품코드','방송일시','마더코드','수량','누적노출(분)']]
                    if len(df[df['방송일시']<x['방송일시'][i]]) > 2:
                        anw.append((df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-3]*0.1+df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-2]*0.1+df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-1]*0.8))

                    else:
                        anw.append(0)
    return anw

def fn_test_two_amt(x,from_train):
    anw=[]
    for i in tqdm(range(len(x))):
        # 무형이면 예측 안하니까 0
        if x['상품군'][i]=='무형':
            anw.append(0)

        else:
            # 상품코드와 누적노출(분)이 같은 이전 2행의 평균으로 채움
            df = from_train[(from_train['상품코드']==x['상품코드'][i])
                      &(from_train['누적노출(분)']==x['누적노출(분)'][i])][['상품코드','방송일시','마더코드','판매단가','수량','누적노출(분)']]
            if len(df[df['방송일시']<x['방송일시'][i]]['수량']) > 1:
                anw.append(((df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-2]*0.2)+(df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-1]*0.8)))

            else:
                # 상품코드가 같은게 없을때, 마더코드와 누적노출(분)이 같은 이전 2행의 평균으로 채움
                df = from_train[(from_train['마더코드']==x['마더코드'][i])&(from_train['상품코드']!=x['상품코드'][i])
                          &(from_train['누적노출(분)']==x['누적노출(분)'][i])][['상품코드','방송일시','마더코드','수량','누적노출(분)']]
                if len(df[df['방송일시']<x['방송일시'][i]]) > 1:
                    anw.append(((df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-2]*0.2)+(df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-1]*0.8)))

                else:
                    # 상품코드와 마더코드가 없을 때, 같은 브랜드로 채워줌
                    df = from_train[(from_train['마더코드']!=x['마더코드'][i])&(from_train['상품코드']!=x['상품코드'][i])
                          &(from_train['누적노출(분)']==x['누적노출(분)'][i])&(from_train['브랜드']==x['브랜드'][i])
                             &(from_train['상품군']==x['상품군'][i])][['상품코드','방송일시','마더코드','수량','누적노출(분)']]
                    if len(df[df['방송일시']<x['방송일시'][i]]) > 1:
                        anw.append(((df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-2]*0.2)+(df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-1]*0.8)))

                    else:
                        anw.append(0)
    return anw


def fn_test_three_amt(x,from_train):
    anw = []
    for i in tqdm(range(len(x))):
        # 무형이면 예측 안하니까 0
        if x['상품군'][i]=='무형':
            anw.append(0)

        else:
            # 상품코드와 누적노출(분)이 같은 이전 3행의 평균으로 채움
            df = from_train[(from_train['상품코드']==x['상품코드'][i])
                      &(from_train['누적노출(분)']==x['누적노출(분)'][i])][['상품코드','방송일시','마더코드','판매단가','수량','누적노출(분)']]
            if len(df[df['방송일시']<x['방송일시'][i]]['수량']) > 2:
                anw.append((df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-3]*0.1+df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-2]*0.1+df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-1]*0.8))
            else:
                # 상품코드가 같은게 없을때, 마더코드와 누적노출(분)이 같은 이전 2행의 평균으로 채움
                df = from_train[(from_train['마더코드']==x['마더코드'][i])&(from_train['상품코드']!=x['상품코드'][i])
                          &(from_train['누적노출(분)']==x['누적노출(분)'][i])][['상품코드','방송일시','마더코드','수량','누적노출(분)']]
                if len(df[df['방송일시']<x['방송일시'][i]]) > 2:
                    anw.append((df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-3]*0.1+df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-2]*0.1+df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-1]*0.8))

                else:
                    # 상품코드와 마더코드가 없을 때, 같은 브랜드로 채워줌
                    df = from_train[(from_train['마더코드']!=x['마더코드'][i])&(from_train['상품코드']!=x['상품코드'][i])
                          &(from_train['누적노출(분)']==x['누적노출(분)'][i])&(from_train['브랜드']==x['브랜드'][i])
                             &(from_train['상품군']==x['상품군'][i])][['상품코드','방송일시','마더코드','수량','누적노출(분)']]
                    if len(df[df['방송일시']<x['방송일시'][i]]) > 2:
                        anw.append((df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-3]*0.1+df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-2]*0.1+df[df['방송일시']<x['방송일시'][i]]['수량'].iloc[-1]*0.8))

                    else:
                        anw.append(0)
    return anw


######### 피크타임 함수 #############
def fn_pk_times_prd(x):
    
    fmt = '%Y-%m-%d %H:%M:%S'
    prod = []

    for i in tqdm(range(len(x))):
        if x['상품군'][i] == '의류':
            pk_st = datetime.strptime(x['방송날짜'][i]+' '+'15:30:00', fmt)
            pk_fn = datetime.strptime(x['방송날짜'][i]+' '+'17:40:00', fmt)
            tot_mm = (pk_fn - pk_st).seconds/60
            # 가운데에 있는 경우
            if (pk_st <= x['방송시작'][i] < pk_fn) and (pk_st <= x['방송종료'][i] < pk_fn):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            # 시작부분이 겹치는 경우
            elif (pk_st <= x['방송시작'][i] < pk_fn) and (pk_fn <= x['방송종료'][i]):
                prod.append(((pk_fn-x['방송시작'][i]).seconds/60) / tot_mm)
            # 끝부분이 겹치는 경우
            elif (x['방송시작'][i] < pk_st) and (pk_st <= x['방송종료'][i] < pk_fn):
                prod.append(((x['방송종료'][i] - pk_st).seconds/60) / tot_mm)
            else:
                prod.append(0)
        elif x['상품군'][i] == '속옷':
            pk_st = datetime.strptime(x['방송날짜'][i]+' '+'19:50:00', fmt)
            pk_fn = datetime.strptime(x['방송날짜'][i]+' '+'23:30:00', fmt)
            tot_mm = (pk_fn - pk_st).seconds/60
            # 가운데에 있는 경우
            if (pk_st <= x['방송시작'][i] < pk_fn) and (pk_st <= x['방송종료'][i] < pk_fn):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            # 시작부분이 겹치는 경우
            elif (pk_st <= x['방송시작'][i] < pk_fn) and (pk_fn <= x['방송종료'][i]):
                prod.append(((pk_fn-x['방송시작'][i]).seconds/60) / tot_mm)
            # 끝부분이 겹치는 경우
            elif (x['방송시작'][i] < pk_st) and (pk_st <= x['방송종료'][i] < pk_fn):
                prod.append(((x['방송종료'][i] - pk_st).seconds/60) / tot_mm)
            else:
                prod.append(0)
        elif x['상품군'][i] == '주방':
            pk_st = datetime.strptime(x['방송날짜'][i]+' '+'10:30:00', fmt)
            pk_fn = datetime.strptime(x['방송날짜'][i]+' '+'17:30:00', fmt)
            tot_mm = (pk_fn - pk_st).seconds/60
            # 가운데에 있는 경우
            if (pk_st <= x['방송시작'][i] < pk_fn) and (pk_st <= x['방송종료'][i] < pk_fn):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            # 시작부분이 겹치는 경우
            elif (pk_st <= x['방송시작'][i] < pk_fn) and (pk_fn <= x['방송종료'][i]):
                prod.append(((pk_fn-x['방송시작'][i]).seconds/60) / tot_mm)
            # 끝부분이 겹치는 경우
            elif (x['방송시작'][i] < pk_st) and (pk_st <= x['방송종료'][i] < pk_fn):
                prod.append(((x['방송종료'][i] - pk_st).seconds/60) / tot_mm)
            else:
                prod.append(0)
        elif x['상품군'][i] == '농수축':
            pk_st1 = datetime.strptime(x['방송날짜'][i]+' '+'00:00:00', fmt)
            pk_fn1 = datetime.strptime(x['방송날짜'][i]+' '+'00:20:00', fmt)
            pk_st2 = datetime.strptime(x['방송날짜'][i]+' '+'21:40:00', fmt)
            pk_fn2 = datetime.strptime(x['방송날짜'][i]+' '+'23:59:59', fmt)
            tot_mm = math.ceil(((pk_fn1 - pk_st1).seconds/60) + ((pk_fn2 - pk_st2).seconds/60))
            # 가운데에 있는 경우
            if (pk_st1 <= x['방송시작'][i] < pk_fn1) and (pk_st1 <= x['방송종료'][i] < pk_fn1):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            elif (pk_st2 <= x['방송시작'][i] < pk_fn2) and (pk_st2 <= x['방송종료'][i] < pk_fn2):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            # 시작부분이 겹치는 경우
            elif (pk_st1 <= x['방송시작'][i] < pk_fn1) and (pk_fn1 <= x['방송종료'][i] < pk_st2):
                prod.append(((pk_fn1-x['방송시작'][i]).seconds/60) / tot_mm)
            elif (pk_st2 <= x['방송시작'][i] < pk_fn2):
                prod.append(((pk_fn2-x['방송시작'][i]).seconds/60) / tot_mm)
            # 끝부분이 겹치는 경우
            elif (x['방송시작'][i] <= pk_st1) and (pk_st1 <= x['방송종료'][i] < pk_fn1):
                prod.append(((x['방송종료'][i] - pk_st1).seconds/60) / tot_mm)
            elif (x['방송시작'][i] <= pk_st2) and (pk_st2 <= x['방송종료'][i] < pk_fn2):
                prod.append(((x['방송종료'][i] - pk_st2).seconds/60) / tot_mm)
            else:
                prod.append(0)
        elif x['상품군'][i] == '이미용':
            pk_st = datetime.strptime(x['방송날짜'][i]+' '+'19:40:00', fmt)
            pk_fn = datetime.strptime(x['방송날짜'][i]+' '+'22:40:00', fmt)
            tot_mm = (pk_fn - pk_st).seconds/60
            # 가운데에 있는 경우
            if (pk_st <= x['방송시작'][i] < pk_fn) and (pk_st <= x['방송종료'][i] < pk_fn):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            # 시작부분이 겹치는 경우
            elif (pk_st <= x['방송시작'][i] < pk_fn) and (pk_fn <= x['방송종료'][i]):
                prod.append(((pk_fn-x['방송시작'][i]).seconds/60) / tot_mm)
            # 끝부분이 겹치는 경우
            elif (x['방송시작'][i] < pk_st) and (pk_st <= x['방송종료'][i] < pk_fn):
                prod.append(((x['방송종료'][i] - pk_st).seconds/60) / tot_mm)
            else:
                prod.append(0)
        elif x['상품군'][i] == '가전':
            pk_st = datetime.strptime(x['방송날짜'][i]+' '+'15:40:00', fmt)
            pk_fn = datetime.strptime(x['방송날짜'][i]+' '+'18:40:00', fmt)
            tot_mm = (pk_fn - pk_st).seconds/60
            # 가운데에 있는 경우
            if (pk_st <= x['방송시작'][i] < pk_fn) and (pk_st <= x['방송종료'][i] < pk_fn):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            # 시작부분이 겹치는 경우
            elif (pk_st <= x['방송시작'][i] < pk_fn) and (pk_fn <= x['방송종료'][i]):
                prod.append(((pk_fn-x['방송시작'][i]).seconds/60) / tot_mm)
            # 끝부분이 겹치는 경우
            elif (x['방송시작'][i] < pk_st) and (pk_st <= x['방송종료'][i] < pk_fn):
                prod.append(((x['방송종료'][i] - pk_st).seconds/60) / tot_mm)
            else:
                prod.append(0)
        elif x['상품군'][i] == '생활용품':
            pk_st = datetime.strptime(x['방송날짜'][i]+' '+'12:40:00', fmt)
            pk_fn = datetime.strptime(x['방송날짜'][i]+' '+'14:50:00', fmt)
            tot_mm = (pk_fn - pk_st).seconds/60
            # 가운데에 있는 경우
            if (pk_st <= x['방송시작'][i] < pk_fn) and (pk_st <= x['방송종료'][i] < pk_fn):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            # 시작부분이 겹치는 경우
            elif (pk_st <= x['방송시작'][i] < pk_fn) and (pk_fn <= x['방송종료'][i]):
                prod.append(((pk_fn-x['방송시작'][i]).seconds/60) / tot_mm)
            # 끝부분이 겹치는 경우
            elif (x['방송시작'][i] < pk_st) and (pk_st <= x['방송종료'][i] < pk_fn):
                prod.append(((x['방송종료'][i] - pk_st).seconds/60) / tot_mm)
            else:
                prod.append(0)
        elif x['상품군'][i] == '건강기능':
            pk_st1 = datetime.strptime(x['방송날짜'][i]+' '+'10:00:00', fmt)
            pk_fn1 = datetime.strptime(x['방송날짜'][i]+' '+'11:00:00', fmt)
            pk_st2 = datetime.strptime(x['방송날짜'][i]+' '+'21:00:00', fmt)
            pk_fn2 = datetime.strptime(x['방송날짜'][i]+' '+'23:40:00', fmt)
            tot_mm = math.ceil(((pk_fn1 - pk_st1).seconds/60) + ((pk_fn2 - pk_st2).seconds/60))
            # 가운데에 있는 경우
            if (pk_st1 <= x['방송시작'][i] < pk_fn1) and (pk_st1 <= x['방송종료'][i] < pk_fn1):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            elif (pk_st2 <= x['방송시작'][i] < pk_fn2) and (pk_st2 <= x['방송종료'][i] < pk_fn2):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            # 시작부분이 겹치는 경우
            elif (pk_st1 <= x['방송시작'][i] < pk_fn1) and (pk_fn1 <= x['방송종료'][i]):
                prod.append(((pk_fn1-x['방송시작'][i]).seconds/60) / tot_mm)
            elif (pk_st2 <= x['방송시작'][i] < pk_fn2) and (pk_fn2 <= x['방송종료'][i]):
                prod.append(((pk_fn2-x['방송시작'][i]).seconds/60) / tot_mm)
            # 끝부분이 겹치는 경우
            elif (x['방송시작'][i] < pk_st1) and (pk_st1 <= x['방송종료'][i] < pk_fn1):
                prod.append(((x['방송종료'][i] - pk_st1).seconds/60) / tot_mm)
            elif (x['방송시작'][i] < pk_st2) and (pk_st2 <= x['방송종료'][i] < pk_fn2):
                prod.append(((x['방송종료'][i] - pk_st2).seconds/60) / tot_mm)
            else:
                prod.append(0)
        elif x['상품군'][i] == '잡화':
            pk_st1 = datetime.strptime(x['방송날짜'][i]+' '+'07:35:00', fmt)
            pk_fn1 = datetime.strptime(x['방송날짜'][i]+' '+'08:05:00', fmt)
            pk_st2 = datetime.strptime(x['방송날짜'][i]+' '+'16:20:00', fmt)
            pk_fn2 = datetime.strptime(x['방송날짜'][i]+' '+'19:50:00', fmt)
            tot_mm = math.ceil(((pk_fn1 - pk_st1).seconds/60) + ((pk_fn2 - pk_st2).seconds/60))
            # 가운데에 있는 경우
            if (pk_st1 <= x['방송시작'][i] < pk_fn1) and (pk_st1 <= x['방송종료'][i] < pk_fn1):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            elif (pk_st2 <= x['방송시작'][i] < pk_fn2) and (pk_st2 <= x['방송종료'][i] < pk_fn2):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            # 시작부분이 겹치는 경우
            elif (pk_st1 <= x['방송시작'][i] < pk_fn1) and (pk_fn1 <= x['방송종료'][i]):
                prod.append(((pk_fn1-x['방송시작'][i]).seconds/60) / tot_mm)
            elif (pk_st2 <= x['방송시작'][i] < pk_fn2) and (pk_fn2 <= x['방송종료'][i]):
                prod.append(((pk_fn2-x['방송시작'][i]).seconds/60) / tot_mm)
            # 끝부분이 겹치는 경우
            elif (x['방송시작'][i] < pk_st1) and (pk_st1 <= x['방송종료'][i] < pk_fn1):
                prod.append(((x['방송종료'][i] - pk_st1).seconds/60) / tot_mm)
            elif (x['방송시작'][i] < pk_st2) and (pk_st2 <= x['방송종료'][i] < pk_fn2):
                prod.append(((x['방송종료'][i] - pk_st2).seconds/60) / tot_mm)
            else:
                prod.append(0)
        elif x['상품군'][i] == '가구':
            pk_st1 = datetime.strptime(x['방송날짜'][i]+' '+'01:20:00', fmt)
            pk_fn1 = datetime.strptime(x['방송날짜'][i]+' '+'01:40:00', fmt)
            pk_st2 = datetime.strptime(x['방송날짜'][i]+' '+'12:20:00', fmt)
            pk_fn2 = datetime.strptime(x['방송날짜'][i]+' '+'12:40:00', fmt)
            tot_mm = math.ceil(((pk_fn1 - pk_st1).seconds/60) + ((pk_fn2 - pk_st2).seconds/60))
            # 가운데에 있는 경우
            if (pk_st1 <= x['방송시작'][i] < pk_fn1) and (pk_st1 <= x['방송종료'][i] < pk_fn1):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            elif (pk_st2 <= x['방송시작'][i] < pk_fn2) and (pk_st2 <= x['방송종료'][i] < pk_fn2):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            # 시작부분이 겹치는 경우
            elif (pk_st1 <= x['방송시작'][i] < pk_fn1) and (pk_fn1 <= x['방송종료'][i]):
                prod.append(((pk_fn1-x['방송시작'][i]).seconds/60) / tot_mm)
            elif (pk_st2 <= x['방송시작'][i] < pk_fn2) and (pk_fn2 <= x['방송종료'][i]):
                prod.append(((pk_fn2-x['방송시작'][i]).seconds/60) / tot_mm)
            # 끝부분이 겹치는 경우
            elif (x['방송시작'][i] < pk_st1) and (pk_st1 <= x['방송종료'][i] < pk_fn1):
                prod.append(((x['방송종료'][i] - pk_st1).seconds/60) / tot_mm)
            elif (x['방송시작'][i] < pk_st2) and (pk_st2 <= x['방송종료'][i] < pk_fn2):
                prod.append(((x['방송종료'][i] - pk_st2).seconds/60) / tot_mm)
            else:
                prod.append(0)
        elif x['상품군'][i] == '침구':
            pk_st1 = datetime.strptime(x['방송날짜'][i]+' '+'10:20:00', fmt)
            pk_fn1 = datetime.strptime(x['방송날짜'][i]+' '+'11:40:00', fmt)
            pk_st2 = datetime.strptime(x['방송날짜'][i]+' '+'14:40:00', fmt)
            pk_fn2 = datetime.strptime(x['방송날짜'][i]+' '+'15:40:00', fmt)
            pk_st3 = datetime.strptime(x['방송날짜'][i]+' '+'21:40:00', fmt)
            pk_fn3 = datetime.strptime(x['방송날짜'][i]+' '+'22:40:00', fmt)
            tot_mm = math.ceil(((pk_fn1 - pk_st1).seconds/60) + ((pk_fn2 - pk_st2).seconds/60) + ((pk_fn3 - pk_st3).seconds/60))
            # 가운데에 있는 경우
            if (pk_st1 <= x['방송시작'][i] < pk_fn1) and (pk_st1 <= x['방송종료'][i] < pk_fn1):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            elif (pk_st2 <= x['방송시작'][i] < pk_fn2) and (pk_st2 <= x['방송종료'][i] < pk_fn2):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            elif (pk_st3 <= x['방송시작'][i] < pk_fn3) and (pk_st3 <= x['방송종료'][i] < pk_fn3):
                prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
            # 시작부분이 겹치는 경우
            elif (pk_st1 <= x['방송시작'][i] < pk_fn1) and (pk_fn1 <= x['방송종료'][i]):
                prod.append(((pk_fn1-x['방송시작'][i]).seconds/60) / tot_mm)
            elif (pk_st2 <= x['방송시작'][i] < pk_fn2) and (pk_fn2 <= x['방송종료'][i]):
                prod.append(((pk_fn2-x['방송시작'][i]).seconds/60) / tot_mm)
            elif (pk_st3 <= x['방송시작'][i] < pk_fn3) and (pk_fn3 <= x['방송종료'][i]):
                prod.append(((pk_fn3-x['방송시작'][i]).seconds/60) / tot_mm)
            # 끝부분이 겹치는 경우
            elif (x['방송시작'][i] < pk_st1) and (pk_st1 <= x['방송종료'][i] < pk_fn1):
                prod.append(((x['방송종료'][i] - pk_st1).seconds/60) / tot_mm)
            elif (x['방송시작'][i] < pk_st2) and (pk_st2 <= x['방송종료'][i] < pk_fn2):
                prod.append(((x['방송종료'][i] - pk_st2).seconds/60) / tot_mm)
            elif (x['방송시작'][i] < pk_st3) and (pk_st3 <= x['방송종료'][i] < pk_fn3):
                prod.append(((x['방송종료'][i] - pk_st3).seconds/60) / tot_mm)
            else:
                prod.append(0) 
        else:
            prod.append(0)
    return prod

def fn_pk_times_tot(x):
    fmt = '%Y-%m-%d %H:%M:%S'
    prod = []

    for i in tqdm(range(len(x))):
        pk_st1 = datetime.strptime(x['방송날짜'][i]+' '+'07:35:00', fmt)
        pk_fn1 = datetime.strptime(x['방송날짜'][i]+' '+'08:05:00', fmt)
        pk_st2 = datetime.strptime(x['방송날짜'][i]+' '+'10:45:00', fmt)
        pk_fn2 = datetime.strptime(x['방송날짜'][i]+' '+'11:45:00', fmt)
        pk_st3 = datetime.strptime(x['방송날짜'][i]+' '+'16:10:00', fmt)
        pk_fn3 = datetime.strptime(x['방송날짜'][i]+' '+'18:45:00', fmt)
        tot_mm = math.ceil(((pk_fn1 - pk_st1).seconds/60) + ((pk_fn2 - pk_st2).seconds/60) + ((pk_fn3 - pk_st3).seconds/60))

        # 가운데에 있는 경우
        if (pk_st1 <= x['방송시작'][i] < pk_fn1) and (pk_st1 <= x['방송종료'][i] < pk_fn1):
            prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
        elif (pk_st2 <= x['방송시작'][i] < pk_fn2) and (pk_st2 <= x['방송종료'][i] < pk_fn2):
            prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)
        elif (pk_st3 <= x['방송시작'][i] < pk_fn3) and (pk_st3 <= x['방송종료'][i] < pk_fn3):
            prod.append(((x['방송종료'][i] - x['방송시작'][i]).seconds/60) / tot_mm)

        # 시작부분이 겹치는 경우
        elif (pk_st1 <= x['방송시작'][i] < pk_fn1) and (pk_fn1 <= x['방송종료'][i] < pk_st2):
            prod.append(((pk_fn1-x['방송시작'][i]).seconds/60) / tot_mm)
        elif (pk_st2 <= x['방송시작'][i] < pk_fn2) and (pk_fn2 <= x['방송종료'][i] < pk_st3):
            prod.append(((pk_fn2-x['방송시작'][i]).seconds/60) / tot_mm)
        elif (pk_st3 <= x['방송시작'][i] < pk_fn3) and (pk_fn3 <= x['방송종료'][i]):
            prod.append(((pk_fn3-x['방송시작'][i]).seconds/60) / tot_mm)

        # 끝부분이 겹치는 경우
        elif (x['방송시작'][i] < pk_st1) and (pk_st1 <= x['방송종료'][i] < pk_fn1):
            prod.append(((x['방송종료'][i] - pk_st1).seconds/60) / tot_mm)
        elif (pk_fn1 <=x['방송시작'][i] < pk_st2) and (pk_st2 <= x['방송종료'][i] < pk_fn2):
            prod.append(((x['방송종료'][i] - pk_st2).seconds/60) / tot_mm)
        elif (pk_fn2 <=x['방송시작'][i] < pk_st3) and (pk_st3 <= x['방송종료'][i] < pk_fn3):
            prod.append(((x['방송종료'][i] - pk_st3).seconds/60) / tot_mm)
        else:
            prod.append(0)
    return prod


    ##########################################################
   ################### 테스트 데이터 채우기 ####################
    ##########################################################
def fn_test_data_v1(x,from_train):
    ####### 브랜드 처리
    x["index"] = range(len(x))
    x = x[["index","방송일시","노출(분)","마더코드","상품코드","상품명","상품군","판매단가","취급액"]]
    cloths = copy.deepcopy(x[x["상품군"]=="의류"][["index","상품명"]])
    inwear = copy.deepcopy(x[x["상품군"]=="속옷"][["index","상품명"]])
    kitchen = copy.deepcopy(x[x["상품군"]=="주방"][["index","상품명"]])
    food = copy.deepcopy(x[x["상품군"]=="농수축"][["index","상품명"]])
    skins = copy.deepcopy(x[x["상품군"]=="이미용"][["index","상품명"]])
    digital = copy.deepcopy(x[x["상품군"]=="가전"][["index","상품명"]])
    daily = copy.deepcopy(x[x["상품군"]=="생활용품"][["index","상품명"]])
    health = copy.deepcopy(x[x["상품군"]=="건강기능"][["index","상품명"]])
    merchandise = copy.deepcopy(x[x["상품군"]=="잡화"][["index","상품명"]])
    nonp = copy.deepcopy(x[x["상품군"]=="무형"][["index","상품명"]])
    furniture = copy.deepcopy(x[x["상품군"]=="가구"][["index","상품명"]])
    bedding = copy.deepcopy(x[x["상품군"]=="침구"][["index","상품명"]])

    cloths_prd = list(map(str.split,cloths["상품명"]))
    inwear_prd = list(map(str.split,inwear["상품명"]))
    kitchen_prd = list(map(str.split,kitchen["상품명"]))
    food_prd = list(map(str.split,food["상품명"]))
    skins_prd = list(map(str.split,skins["상품명"]))
    digital_prd = list(map(str.split,digital["상품명"]))
    daily_prd = list(map(str.split,daily["상품명"]))
    health_prd = list(map(str.split,health["상품명"]))
    merchandise_prd = list(map(str.split,merchandise["상품명"]))
    nonp_prd = list(map(str.split,nonp["상품명"]))
    furniture_prd = list(map(str.split,furniture["상품명"]))
    bedding_prd = list(map(str.split,bedding["상품명"]))
    
    cloths['브랜드'] = fn_cloths_brand(cloths_prd)
    inwear['브랜드'] = fn_inwear_brand(inwear_prd)
    kitchen['브랜드'] = fn_kitchen_brand(kitchen_prd)
    food['브랜드'] = fn_food_brand(food_prd)
    skins['브랜드'] = fn_skins_brand(skins_prd)
    digital['브랜드'] = fn_digital_brand(digital_prd)
    daily['브랜드'] = fn_daily_brand(daily_prd)
    health['브랜드'] = fn_health_brand(health_prd)
    merchandise['브랜드'] = fn_merchandise_brand(merchandise_prd)
    nonp['브랜드'] = fn_nonp_brand(nonp_prd)
    furniture['브랜드'] = fn_furniture_brand(furniture_prd)
    bedding['브랜드'] = fn_bedding_brand(bedding_prd)
    print('브랜드 변수 붙이기 완료')
    cloths['상품종류'] = fn_prd_cloths(cloths)
    inwear['상품종류'] = fn_prd_inwear(inwear)
    kitchen['상품종류'] = fn_prd_kitchen(kitchen)
    food['상품종류'] = fn_prd_food(food)
    skins['상품종류'] = fn_prd_skins(skins)
    digital['상품종류'] = fn_prd_digital(digital)
    daily['상품종류'] = fn_prd_daily(daily)
    health['상품종류'] = fn_prd_health(health)
    merchandise['상품종류'] = fn_prd_merchandise(merchandise)
    nonp['상품종류'] = fn_prd_nonp(nonp)
    furniture['상품종류'] = fn_prd_furniture(furniture)
    bedding['상품종류'] = fn_prd_bedding(bedding)
    print('상품종류 변수 붙이기 완료')
    brands_df = pd.concat([bedding,cloths,daily,digital,food,furniture,health,inwear,kitchen,merchandise,nonp,skins],axis=0)
    x = pd.merge(x,brands_df[['index','브랜드','상품종류']],on='index')
    del x['index']
    
    x["브랜드"].replace(np.nan,"Nobrand",inplace=True)
    print('브랜드 없는 경우 Nobrand로 변경')
    
    anw=[]
    for i in range(len(x)):
        anw.append([])

    for i in range(len(x)):
        for j in range(len(x['상품종류'][i])):
            if x['브랜드'][i] == 'Nobrand':
                a  = x['상품종류'][i][j]
                anw[i].append(a)
            else:
                a = x['브랜드'][i]+x['상품종류'][i][j]
                anw[i].append(a)
    x['브랜드상품'] = anw
    print('브랜드상품 변수 붙이기 완료')
    
    ####### 노출(분) 전처리 및 방송일시 형태
    x["노출(분)"].fillna(method='ffill',inplace=True)
    x["방송일시"] = pd.to_datetime(x["방송일시"])
    print('노출(분) 전처리 완료')
    
    ####### 방송_월, 방송_일 추가
    dd=[]
    for i in range(len(x)):
        dd.append(datetime.strptime(x["방송일시"][i].strftime("%Y-%m-%d"),"%Y-%m-%d").date())
    x["방송날짜"] = dd

    month=[]
    for i in range(len(x)):
        month.append(x["방송일시"][i].month)
    x["방송_월"] = month

    day=[]
    for i in range(len(x)):
        day.append(x["방송일시"][i].day)
    x["방송_일"] = day
    print('방송날짜, 방송_월, 방송_일 변수 완료')
    
    ####### 상품군별 최대 일수 병합
    Duration = pd.pivot_table(from_train,index='상품군',values='판매일수').reset_index()
    
    x = pd.merge(x,Duration)
    print('상품군별 최대 일수 병합 완료')
    
    ####### 방송날짜 str
    x['방송날짜'] = x['방송날짜'].apply(lambda z:str(z)[:10])
    return x

def fn_test_data_v2(x,from_train):    
    x = x.sort_values(by=['방송일시','마더코드','상품코드']).reset_index(drop=True)
    
    ####### 총노출분, 누적노출분, 노출비율
    x['노출(분)'] = x['노출(분)'].apply(lambda z: round(z,1))
    anw=[]
    srt_idx=0
    for i in tqdm(range(1,len(x))):
        if x['마더코드'][i]==x['마더코드'][i-1]:
            fn_idx=i
            if fn_idx==len(x)-1:
                a = pd.pivot_table(x[srt_idx:],index='상품코드',values='노출(분)',aggfunc='sum').reset_index()
                a = a.rename({'노출(분)':'총노출(분)'},axis=1)
                b = pd.merge(x.loc[srt_idx:,:],a,how='left')['총노출(분)'].tolist()
                anw.extend(b)
        else:
            if srt_idx == i-1:
                a = pd.pivot_table(x[srt_idx:srt_idx+1],index='상품코드',values='노출(분)',aggfunc='sum').reset_index()
                a = a.rename({'노출(분)':'총노출(분)'},axis=1)
                b = pd.merge(x.loc[srt_idx:srt_idx,:],a,how='left')['총노출(분)'].tolist()
                anw.extend(b)
                srt_idx=i
            else:
                a = pd.pivot_table(x[srt_idx:i],index='상품코드',values='노출(분)',aggfunc='sum').reset_index()
                a = a.rename({'노출(분)':'총노출(분)'},axis=1)
                b = pd.merge(x.loc[srt_idx:fn_idx,:],a,how='left')['총노출(분)'].tolist()
                anw.extend(b)
                srt_idx=i
    x['총노출(분)']=anw
    
    for_acc = pd.pivot_table(x,index=['방송일시','마더코드'],values='노출(분)').reset_index()
    anw=[for_acc['노출(분)'][0]]
    for i in tqdm(range(1,len(for_acc))):
        if for_acc['마더코드'][i]==for_acc['마더코드'][i-1]:
            anw.append(anw[i-1]+for_acc['노출(분)'][i])
        else:
            anw.append(for_acc['노출(분)'][i])
    for_acc['누적노출(분)']=anw
    x = pd.merge(x,for_acc[['방송일시','마더코드','누적노출(분)']],how='left')
    
    def to_zeros1(z):
        if z['상품군']=='무형':
            return 0
        else:
            return z['누적노출(분)']
    def to_zeros2(z):
        if z['상품군']=='무형':
            return 0
        else:
            return z['총노출(분)']
    x['누적노출(분)'] = x[['상품군','누적노출(분)']].apply(to_zeros1,axis=1)
    x['총노출(분)'] = x[['상품군','총노출(분)']].apply(to_zeros2,axis=1)
    x['누적노출(분)'] = x['누적노출(분)'].apply(lambda z: round(z,1))
    
    for i in range(len(x)):
        if x['누적노출(분)'][i] > x['총노출(분)'][i]:
            x.loc[i,'총노출(분)'] = x.loc[i,'누적노출(분)']
    idx = []
    for i in range(len(x)):
        if x['누적노출(분)'][i] > x['총노출(분)'][i]:
            idx.append(i)
    if len(idx)>0:
        print('총노출(분)에 문제가 있습니다.')
        
    x['lng_time'] = x['누적노출(분)'] / x['총노출(분)']
    x['lng_time'] = x['lng_time'].fillna(0)
    
    print('총노출, 누적노출, 노출비율 변수 완료')
    
    ####### 기상데이터 붙이기
    weather = pd.read_csv('../2020년 기상데이터.csv',header=0,encoding='euc-kr')
    dc = pd.pivot_table(weather, index='일시', 
                    values=['기온(°C)','강수량(mm)','습도(%)'],
                    aggfunc='mean')
    dc.reset_index(inplace=True)
    dc['일시'] = dc['일시'].apply(lambda z: z[:13])

    x['방송날짜2'] = x["방송일시"].apply(lambda z : str(z)[:13])

    x = pd.merge(x,dc,left_on='방송날짜2',right_on='일시',how='left')
    del x['방송날짜2']
    del x['일시']
    
    x['기온(°C)']=x['기온(°C)'].fillna(method='ffill')
    x['습도(%)']=x['습도(%)'].fillna(method='ffill')
    x['강수량(mm)'] = x['강수량(mm)'].fillna(0)
    x['기온_int']=x['기온(°C)'].apply(lambda x: int(x))
    
    print('기상 데이터 변수 완료')
    
    ####### 미세먼지 데이터 붙이기
    monji = pd.read_csv('../미세먼지 데이터.csv',header=0,encoding='euc-kr')
    dc = pd.pivot_table(monji, index='일시', 
                    values='1시간평균 미세먼지농도(㎍/㎥)',
                    aggfunc='mean').reset_index()
    x['방송날짜2'] = x["방송일시"].apply(lambda x : str(x)[:16])
    x = pd.merge(x,dc,left_on='방송날짜2',right_on='일시',how='left')
    del x['방송날짜2']
    del x['일시']
    x = x.rename({'1시간평균 미세먼지농도(㎍/㎥)':'1시간평균 미세먼지농도'},axis='columns')
    x['1시간평균 미세먼지농도'] = x['1시간평균 미세먼지농도'].fillna(0)
    print('미세먼지 데이터 변수 완료')
    
    ####### 소비지출전망 CSI
    costs = pd.read_excel('../소비자동향조사_전국__20200825184526.xlsx',header=0)
    costs = costs[costs['분류코드별']=='전체']
    del costs['분류코드별']
    costs.set_index(['지수코드별'],inplace=True)
    costs.index = costs.index.map(lambda x:x.replace("\u3000",""))
    # 필요한 변수만 남기기
    costs = costs[costs.index.isin(['소비지출전망CSI', '소비자심리지수'])]
    for i in tqdm(range(len(costs))):
        anw=[]
        for j in range(len(x)):
            for z in range(len(costs.columns)):
                if (str(x['방송일시'][j].year) == costs.columns[z][:4]) and (str(x['방송일시'][j].month).zfill(2) == costs.columns[z][-2:]):
                    anw.append(costs.iloc[i,z-1])
                    break
                elif (str(x['방송일시'][j].year) == '2020') and (str(x['방송일시'][j].month).zfill(2) == '07'):
                    anw.append(costs.iloc[i,-1])
                    break
                else: pass
        x[costs.index[i]] = anw
    print('소비지출전망 변수 완료')
    
    ####### 방송시작, 방송종료
    def start_time(x):
        return x[0]+timedelta(minutes=x[1])-timedelta(minutes=x[2])
    def finish_time(x):
        return x[0]+timedelta(minutes=x[1])

    x['방송시작'] = x[['방송일시','노출(분)','누적노출(분)']].apply(lambda z:start_time(z),axis=1)
    x['방송종료'] = x[['방송일시','노출(분)']].apply(lambda z:finish_time(z),axis=1)
    t = ['월','화','수','목','금','토','일']
    x['요일'] = x['방송일시'].apply(lambda z: t[z.weekday()])
    x['요일']
    
    hour = []
    시간대 = []
    for i in range(len(x)):
        hour.append(x['방송일시'][i].hour)
        시간대.append(str(x['방송일시'][i])[11:16])

    x['시간대']=시간대
    x['Hour'] = hour
    print('방송시작,방송종료,요일,시간대,Hour 변수 완료')
    
    
    ####### 피크타임변수(0 1)
    x['방송날짜'] = x['방송날짜'].apply(lambda z:str(z)[:10])
    ths = ['의류', '속옷', '주방', '농수축', '이미용', '가전', '생활용품', '건강기능', '잡화','가구', '침구']
    anw = []
    anw2 = []
    percc = 75
    for i in ths:
        anw.append(np.percentile(from_train[from_train['상품군']==i]['수량'],percc))
        for_pk = pd.pivot_table(from_train[from_train['상품군']==i],index=['시간대'],values='수량',aggfunc='mean').sort_values(by='수량',ascending=False).reset_index()
        anw2.append(for_pk[for_pk['수량']>np.percentile(from_train[from_train['상품군']==i]['수량'],percc)]['시간대'].tolist())
    pk_percc = pd.DataFrame({'상품군':ths,'%s분위수'%percc:anw,'pk_시간대':anw2})
    pk_percc
    
    anw=[]
    for i in range(len(x)):
        try:
            idx = pk_percc['상품군'].tolist().index(x['상품군'][i])
            if x['시간대'][i] in pk_percc['pk_시간대'][idx]:
                anw.append(1)
            else:
                anw.append(0)
        except:
            anw.append(0)
    x['pk_time_01'] = anw
    print('pk_time_01 변수 완료')

    ####### 피크타임변수(prd)
    x['pk_times_prd'] = fn_pk_times_prd(x)
    print('pk_times_prd 변수 완성')

    x['pk_times_tot'] = fn_pk_times_tot(x)
    print('pk_times_tot 변수 완성')
    
    ####### NS shop 주가
    df = fdr.DataReader('138250','2019-01-01','2020-06-30').reset_index()
    df['Date'] = df['Date'].apply(lambda z:str(z)[:10])
    x = pd.merge(x,df[['Date','Open']],how='left',left_on = '방송날짜',right_on='Date')
    del x['Date']
   
    for_c = pd.pivot_table(x,index='방송날짜',values='Open').reset_index()
    datt = pd.DataFrame(pd.unique(x['방송날짜']),columns=['방송날짜'])
    datt = pd.merge(datt,for_c,how='left')
    datt['Open']=datt['Open'].fillna(method='ffill')
    datt['Open']=datt['Open'].fillna(method='bfill')
    del x['Open']
    x = pd.merge(x,datt,how='left')
    print('NS shop 주가 변수 완성')
    
    ####### 온라인 쇼핑몰 데이터
    shopp = pd.read_excel('../온라인쇼핑몰_취급상품범위_상품군별거래액_20200825231107.xlsx',header=0)
    shopp = shopp.iloc[0,:].to_frame().T.iloc[:,2:]
    shopp = shopp.rename({'2020. 05 p)':'2020. 05', '2020. 06 p)':'2020. 06'},axis='columns')
    x['날짜2'] = x['방송일시'].apply(lambda x: str(x.year)+'. '+str(x.month).zfill(2))
    anw = []
    for i in range(len(x)):
        if x['날짜2'][i]=='2020. 07':
            anw.append(shopp.iloc[0,-1])
        else:
            idx = shopp.columns.values.tolist().index(x['날짜2'][i])
            anw.append(shopp.iloc[0,idx-1])
    x['온라인 쇼핑몰 거래액'] = anw
    del x['날짜2']
    print('온라인 쇼핑몰 거래액 변수 완료')
    
    ####### 지난 2회, 3회 실적 가중치
    x['two_amt'] = fn_test_two_amt(x,from_train)
    print('지난 2회 실적 가중치 변수 완료')
    x['three_amt'] = fn_test_three_amt(x,from_train)
    print('지난 3회 실적 가중치 변수 완료')
    
    ####### 상품군별 시간대 가중치
    scl = MinMaxScaler()
    
    scl = MinMaxScaler()

    total = pd.DataFrame(columns=['상품군','시간대','수량'])
    for i in from_train['상품군'].unique().tolist():
        a = pd.pivot_table(from_train[from_train['상품군']==i],index='시간대',values='수량',aggfunc='mean').reset_index()
        a['수량'] = scl.fit_transform(np.array(a['수량']).reshape(-1,1))
        a['상품군']=i
        total = pd.concat([total,a])
    
    total.rename(columns={'수량':'time_weight'},inplace=True)
    
    for i in range(len(x)):
        cate = x['상품군'][i]
        if x['시간대'][i] not in np.sort(pd.unique(total[total['상품군']==cate]['시간대'])):
            lst = pd.unique(total[total['상품군']==cate]['시간대']).tolist()
            lst.append(x['시간대'][i])
            lst = np.sort(lst).tolist()
            idx = lst.index(x['시간대'][i])-1
            x.loc[i,'시간대'] = lst[idx]
        else:
            pass
    x = pd.merge(x,total,how='left')
    print('상품군별 시간대 가중치 완료')
    
    ####### 오전/오후/저녁/새벽으로 시간대 범주화
    anw=[]
    for i in range(len(x)):
        if x['Hour'][i] in [9,10,11]:
            anw.append('오전')
        elif x['Hour'][i] in [12,13,14,15,16,17]:
            anw.append('오후')
        elif x['Hour'][i] in [18,19,20,21]:
            anw.append('저녁')
        else:
            anw.append('그외')
    x['시간_범주'] = anw
    print('시간_범주 변수 완료')
    
    ####### 성별/무이자/일시불 로 상품 나누기
    def gender(x):
        if ('여성' in x) or ('여아' in x):
            return 1
        elif( '남성' in x) or ('남아' in x):
            return 2
        else:
            return 0
    def sale(x):
        if ('무이자' in x) or ('(무)' in x) or ('무)' in x):
            return 1
        elif ('일시불' in x) or ('(일)' in x) or ('일)' in x):
            return 2
        else:
            return 0
    def setss(x):
        if any(['세트' in x,'6인용' in x,'3구' in x,'혼합' in x,'20종' in x,'드로즈' in x,'1세트' in x,'기본형' in x,'10봉' in x,
         '슈퍼싱글' in x,'SS' in x,'1+1' in x,'쉐이핑 레깅스' in x, 'A1' in x,'그레이스' in x,'100포' in x,'9팩' in x,'TQ12' in x,
         '싱글팩' in x,'끈형' in x,'2in1' in x,'2IN1형' in x,'기본형' in x,'020' in x,'55U' in x,'55N' in x,'성인' in x,'S5BB' in x,
         '악어 토트백' in x,'100개' in x,'중형' in x,'남아' in x,'2.2' in x,'토트백' in x,'리스틀릿' in x,'기본구성' in x,'6형' in x,
         'TQ11' in x,'싱글' in x,'대형' in x,'400매' in x,'35g' in x,'10kg' in x,'1세트' in x,'+배터리 1개' in x,'복합구성' in x, 
         '주얼리 세트' in x, '600' in x,'울실크 스카프' in x, '2CH' in x,'구성1' in x,'세트1' in x,'점보특대형' in x,'800 5단' in x,
         '17팩' in x, '더커진' in x, '풀패키지' in x]):
            return 1
        elif any(['10인용' in x,'2구' in x,'단일' in x,'12종' in x,'트렁크' in x,'2세트' in x,'고급형' in x,'20봉' in x,'킹' in x,
                  'Q' in x,'치마레깅스' in x,'마론' in x,'50포' in x,'6팩' in x,'TQ18' in x,'더블팩' in x,'긴팔형' in x,'스탠드' in x,
                  '스탠드형' in x,'하부장형' in x,'040' in x,'65U' in x,'65N' in x,'아동' in x,'바디 숄더백' in x,'90개' in x,
                  '대형' in x,'여아' in x,'3.2' in x,'체인 숄더백' in x,'파일백' in x,'더블구성' in x,'7형' in x,'TQ48' in x,
                  '더블' in x,'200매' in x,'18g' in x,'8kg' in x,'2세트' in x,'스킨구성' in x,'800' in x,'1CH' in x,'구성2' in x,
                  '세트2' in x,'점보형' in x,'1000 5단' in x,'26팩' in x,'실속패키지' in x]):
            return 2
        elif any(['3인용' in x,'10종' in x,'롱드로즈' in x,'프리미엄형' in x,'퀸' in x,'K' in x,'TQ55' in x,'런닝형' in x,'홈멀티' in x,
                  '기본형 + 하부장형' in x,'70U' in x,'75N' in x,'테일 숄더백' in x,'특대형' in x,'4.2' in x,'버킷백' in x,'숄더백' in x,
                  'TQ49' in x,'15g' in x,'3세트' in x,'900' in x,'세트3' in x,'중형' in x,'800 3단' in x]):
            return 3
        elif any(['4인용' in x,'9종' in x,'코튼' in x,'슈퍼킹' in x,'SK' in x,'하부장 + 키큰장' in x,'75U' in x,'슈퍼특대형' in x,
                  '투웨이백' in x,'사첼' in x,'13g' in x, '5세트' in x]):
            return 4
        elif any(['8종' in x,'크로스백' in x]):
            return 5
        elif any(['7종' in x]):
            return 6
        elif any(['6종' in x]):
            return 7
        elif any(['5종' in x]):
            return 8
        elif any(['3종' in x]):
            return 9
        else:
            return 0

    x['성별']=x['상품명'].apply(gender)
    x['일/무'] = x['상품명'].apply(sale)
    x['상품차이']=x['상품명'].apply(setss)
    
    return x



